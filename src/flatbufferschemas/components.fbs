// Copyright 2015 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

include "attributes.fbs";
include "bullet_def.fbs";
include "common.fbs";
include "library_components.fbs";
include "editor_components.fbs";

namespace fpl;

table TimeLimitDef {
  timelimit:float;
}

table RailDenizenDef {
  start_time:float;
  initial_playback_rate:float;
  rail_name:string;
  rail_offset:Vec3; // Additional offset from the rail position
  rail_orientation:Vec3; // Rotation to apply to the rail
  rail_scale:Vec3; // Scale to apply to the rail
  update_orientation:bool = true;
  inherit_transform_data:bool = false;
  enabled:bool = true;
}

table SoundDef {
  sound:string;
}

enum AnimObject : byte {
  HungryHippo,
  DapperCroc,
  LadyMandrill,
  LovelyGiraffette,
  BankerBird,
  FernShort,
  FernMid,
  FernTall,
  Heart,
  Scenery,
  Gate,
}

enum PatronAction : byte {
  GetUp,
  Idle,
  Eat,
  Satisfied,
  Fall,
}

table SimpleMovementDef {
  velocity:Vec3;
}

table PatronEvent {
  // Animation to play.
  action:PatronAction;

  // Time to start event.
  // -1 means start as soon as previous event completes.
  time:int = -1;
}

table PatronDef {
  // The type of patron being animated.
  anim_object:AnimObject;

  // Each time the raft makes a lap around the river, it's lap counter is
  // incremented.  Patrons will only stand up when the lap counter is in the
  // range [min_lap, max_lap].
  min_lap:float = -1.0;
  max_lap:float = -1.0;

  // Sequence of animations to play when StartEvent() is called.
  events:[PatronEvent];

  // If the raft is within the pop in radius, this patron will stand up.
  pop_in_radius:float;

  // If the raft is outside the pop out radius, this patron will fall down.
  pop_out_radius:float;

  // The tag of the physics body that needs to be hit to trigger a fall.
  // An empty name uses all bodies.
  target_tag:string;

  // The maximum distance the patron will move when trying to catch sushi.
  max_catch_distance:float = 5.0;

  // The maximum distance the patron will move when trying to catch sushi.
  max_catch_distance_for_search:float = 12.0;

  // The maximum angle off of the vector to the raft that the patron with turn
  // to face when trying to catch sushi. Note that 180 fully encompasses it.
  max_catch_angle:float = 90.0;

  // When looking at sushi to catch, consider the sushi's trajectory over
  // this time range. In seconds.
  min_catch_time_for_search:float = 0.01;
  max_catch_time_for_search:float = 2.5;

  // When actually moving to catch a sushi, make sure you get to the target
  // position within this time. Ensures we don't react too quickly or slowly.
  // Better to smoothly move to a close position in 200ms than to jerk to it
  // in 10ms (we'll probably catch the sushi either way since our hit region
  // is large). Likewise, better to move to the target position in 2.5s and
  // wait, than to take 5s to move there and look like we're not responding.
  // In seconds.
  min_catch_time:float = 0.2;
  max_catch_time:float = 2.5;

  // Average speed at which to travel towards the sushi catch position.
  min_catch_speed:float = 1.0;
  max_catch_speed:float = 5.0;

  // Time to return to the last idle position, after we're done trying to
  // catch sushi.
  return_time:float = 1.0;

  // Time to accelerate onto the rails, if the patron is traveling along rails.
  rail_accelerate_time:float = 0.5;

  // The height above the patron at which to spawn the happy-indicator.
  point_display_height:float = 10.0;

  // The angle beyond which the patron should turn to face the raft, in degrees.
  // This is the maximum we allow the patron to face away from the raft.
  max_face_angle_away_from_raft:float = 90.0;

  // The time to take turning to face the raft, in seconds.
  time_to_face_raft:float = 0.2;
}

table PlayerDef {}

table PlayerProjectileDef {}

table DigitDef {
  // Must list 10 meshes.
  digit_mesh_list:[string];
  divisor:int = -1;
  attrib:fpl.zooshi.AttributeDef = Unspecified;
  shader:string;
  render_pass: [RenderPass];
}

// A spline node for a rail.
table RailNodeDef {
  // The nodes are put in ascending order to define the rail spline.
  // If you don't specify an ordering, the node entities will be given a
  // default ordering matching the order they were defined in the entity file.
  // This ordering will be preserved when you save out the entity list, even
  // if the order has changed on export.
  ordering:float;

  // The name of the rail we're part of. You'll query RailNodeComponent by
  // rail_name to get a list of rail points in the correct order.
  rail_name:string;

  // Total time for this rail. Only the first rail spline node (lowest ordering) for
  // each rail should have this set.
  total_time:float;

  // Reliable distance for this rail. Only the first rail spline node (lowest
  // ordering) for each rail should have this set.
  reliable_distance:float;
}

table RiverDef {
  // Which rail to base the river on?
  rail_name:string;

  // Generating the banks of the river involves some random elements.
  // Explicitly set the seed so that the banks are generated the same
  // every time.
  random_seed:uint;
}

// Component to hide and show the entity, based on the lap number of the raft
// as it goes around the course.
table LapDependentDef {
  // The minimum lap amount to be visible for.
  min_lap:float;
  // The maximum lap amount to be visible for.
  max_lap:float;
}

table SceneryDef {
  // The type of scenery being animated.
  anim_object:AnimObject;
}

// No data, (never loaded from raw data) but we need it to be a thing so that it
// ends up in the enum.
table ListenerDef {}
table AttributesDef {}
table ScoreDef {}
table ServicesDef {}
table ShadowControllerDef {}

//-----------------------------------
// Data for defining the entities themselves:
// Union containing every component data type.
union ComponentDataUnion {
  CommonServicesDef,
  SimpleMovementDef,
  GraphDef,
  ServicesDef,
  MetaDef,
  RailDenizenDef,
  ShadowControllerDef,
  LapDependentDef,
  PlayerDef,
  PatronDef,
  PlayerProjectileDef,
  PhysicsDef,
  TimeLimitDef,
  DigitDef,
  RenderMeshDef,
  ListenerDef,
  RiverDef,
  ScoreDef,
  SoundDef,
  AttributesDef,
  RailNodeDef,
  SceneryDef,
  TransformDef,
  fpl.scene_lab.EditOptionsDef,
  AnimationDef,
}

// Actual definition for each component.  Wrapped in a table because
// you can't make arrays of raw unions.
table ComponentDefInstance {
  data:ComponentDataUnion;
}

// An entity is just a list of what components it has, and what their
// starting values should be.
table EntityDef {
  component_list:[ComponentDefInstance];
}

// A list of entities.
table EntityListDef {
  entity_list:[EntityDef];
}

root_type EntityListDef;
