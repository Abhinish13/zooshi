// Copyright 2015 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

include "bullet_def.fbs";
include "common.fbs";
include "events.fbs";

namespace fpl;

// Data definitions for all of components:
// ---------------------------------------------
table TransformDef {
  position:Vec3;
  scale:Vec3;
  orientation:Vec3;
  children:[EntityDef];
}

table TimeLimitDef {
  timelimit:float;
}

table RailDenizenDef {
  start_time:float;
  initial_playback_rate:float;
  on_new_lap:fpl.fpl_project.ActionDef;
  rail_file:string;
  rail_offset:Vec3; // Additional offset from the rail position
  rail_orientation:Vec3; // Rotation to apply to the rail
  rail_scale:Vec3; // Scale to apply to the rail
  update_orientation:bool = true;
  enabled:bool = true;
}

table RenderMeshDef {
  source_file:string;
  shader:string;
  ignore_culling:bool = false;
}

table SoundDef {
  sound:string;
}

table PhysicsDef {
  shape:BulletShapeDef;
  offset:Vec3;
  mass:float = 1;
  restitution:float;
  kinematic:bool = false;
  collision_type:BulletCollisionType;
  collides_with:[BulletCollisionType];
}

table PatronDef {
  on_collision:fpl.fpl_project.ActionDef;

  // Each time the raft makes a lap around the river, it's lap counter is
  // incremented.  Patrons will only stand up when the lap counter is in the
  // range [min_lap, max_lap].
  min_lap:int;
  max_lap:int;

  // If the raft is within the pop in radius, this patron will stand up.
  pop_in_radius:float;

  // If the raft is outside the pop out radius, this patron will fall down.
  pop_out_radius:float;
}

table PlayerDef {
  on_fire:fpl.fpl_project.ActionDef;
}

table PlayerProjectileDef {
  on_collision:fpl.fpl_project.ActionDef;
}

table ShadowDef {
  radius:float;
}

// No data, (never loaded from raw data) but we need it to be a thing so that it
// ends up in the enum.
table ListenerDef {}
table AttributesDef {}
table ScoreDef {}
table RiverDef {}
table ServicesDef {}

//-----------------------------------
// Data for defining the entities themselves:
// Union containing every possible component.
// Note: This will also be the order the components execute their updates in.
union ComponentDataUnion {
  ServicesDef,
  RailDenizenDef,
  PlayerDef,
  PatronDef,
  PlayerProjectileDef,
  PhysicsDef,
  TimeLimitDef,
  RenderMeshDef,
  ListenerDef,
  RiverDef,
  ScoreDef,
  SoundDef,
  AttributesDef,
  // The transform component should update after any other components that
  // might spawn or modify entities with transforms.
  TransformDef,
  ShadowDef,
}

// Actual definition for each component.  Wrapped in a table because
// you can't make arrays of raw unions.
table ComponentDefInstance {
  data:ComponentDataUnion;
}

// An entity is just a list of what components it has, and what their
// starting values should be.
table EntityDef {
  component_list:[ComponentDefInstance];
}

