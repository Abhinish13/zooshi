// Copyright 2015 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

include "audio_config.fbs";
include "common.fbs";
include "components.fbs";
include "world_editor_config.fbs";

namespace fpl.fpl_project;

enum EntityDefs : byte {
  kPatronLadyMandrill,
  kPatronMenacingCroc,
  kPatronMoustacheCroc,
  kProjectile,
  kSplatterParticle,
  kGround,
  kBackground,
  kMidGroundTree,
  kSushiGarden,
  kSkybox,
  kBambooMat,
  kRockSmallest,
  kRockSmaller,
  kRockShort,
  kRockMid,
  kRockTall,
  kFernShort,
  kFernMid,
  kFernTall,
  kGrassDense,
  kGrassSmall,
  kGrassWide,
  kNumEntityDef
}

// One point in the river cross-section.
//
// 0      1     2    3     4     5          6    7
// *---___                             _____*----*
//        *-----*____       _____*-----
//                   *_____*
//
//                   ^
//                   |
//                river_index
//
// Here the river cross-section has 8 points. Each point has a horizontal (x)
// and vertical (z) offset. There's some randomness allowed for these offsets.
// Therefore, we specify min/max pairs.
//
// The `river_index` indicates the left side of the river.
// `river_index` + 1 is the right bank. Therefore, the river width is at least
//      banks[river_index + 1].x_min - banks[river_index].x_min
// and at most,
//      banks[river_index + 1].x_max - banks[river_index].x_max
//
// So in the example above, to make the river wider, you'd decrease
// banks[3].x_min/max and increase banks[3].x_min/max. Be sure to keep the
// x-values monotonically increasing. You will get strange geometry otherwise.
//
// Riverbanks are zero-based, (with zero representing the width of the river
// at that point), so 3 and 4 are likely to be at or near zero.
// This means that in most cases, you probably want to have everything <=
// river_index to have negative x values, and everything > river_index to have
// positive x values.
//
table RiverBankContour {
  x_min:float;  // Min absolute distance from the center of the river.
  x_max:float;  // Max absolute distance from the center of the river.
  z_min:float;  // Min absolute height of the bank.
  z_max:float;  // Max absolute height of the bank.
}

table RiverConfig {
  rail_filename:string;
  spline_stepsize: float;
  track_height:float;
  texture_tile_size:float;
  material:string;
  shader:string;

  // Detail the cross section of the procedurally-generated banks.
  // See the diagram in RiverBankContour for more information.
  banks:[RiverBankContour];
  width: float;

  // Index into `banks` of the left side of the river. The right side is
  // river_index + 1.
  river_index:int;
}

table RenderConfig {
  // Resolution (in pixels) of the shadowmap.
  // Needs to be a power of 2, or GLES breaks
  // Larger = shadows are visible further away, but takes more memory.
  shadow_map_resolution:int;

  // Scalar affecting the resolution/scale of the shadowmap.
  // Smaller values mean low resolution - you can see them from
  // far away, but shadows are blocky.
  shadow_map_zoom:float;

  // Distance (in world units) that the shadow-map should focus in front of
  // the camera.  0 means the shadow map is perfectly centered on the camera.
  shadow_map_offset:float;

  // Location (in world space) of the light source:
  light_position:fpl.Vec3;

  // Intensity of shadows.  1.0 = solid black, 0.0 = invisible shadows.
  shadow_intensity:float;

  // Minimum distance at which the fog does anything.
  fog_roll_in_dist:float;

  // Distance after which the fog no longer affects the color of the object.
  fog_max_dist:float;

  // The color of the fog.
  fog_color:fpl.ColorRGBA;

  // The saturation of the color - 1.0 means that at max distance, objects
  // will be entirely fog_color-colored.  0.0 means that the fog has no effect.
  fog_max_saturation:float;
}

table EntityGrid {
  // Entity to repeat in x-y grid pattern.
  entity:EntityDefs;

  // Number of entities in x and y directions.
  count:fpl.Vec3i;

  // Distance between entities in x and y directions.
  separation:fpl.Vec3;

  // Center of the grid.
  position:fpl.Vec3;

  // Scale applied to each entity.
  scale:fpl.Vec3;
}

table EntityRing {
  // Entity to repeat along an x-y circle.
  entity:EntityDefs;

  // Number of entities in along the ring.
  count:int;

  // Distance from the center of the ring.
  radius:float;

  orientation_offset_angle:float;

  // Placement of first entity on ring, in degrees from x-axis towards y-axis.
  position_offset_angle:float;

  // Center of the ring.
  position:fpl.Vec3;

  // Scale applied to each entity.
  scale:fpl.Vec3;
}

table PredefinedEntity {
  // Entity type to place at the given location.
  entity:EntityDefs;

  // The location to place it at.
  position:fpl.Vec3;

  // The orientation to place it at.
  orientation:fpl.Vec3;

  // Scale applied to the entity.
  scale:fpl.Vec3;
}

table Config {
  // Audio engine configuration file.
  audio_config:string;

  // Input configuration file.
  input_config:string;

  // The manifest of assets to load.
  assets_filename:string;

  // The initial speed of the projectiles on the forward vector.
  projectile_speed: float;

  // The initial speed of the projectiles on the up vector.
  projectile_upkick: float;

  // The initial offset from the player the projectile starts at.
  projectile_offset: fpl.Vec3;

  // The strength of gravity
  gravity: float;

  // The maximum number of steps to advance bullet each frame
  bullet_max_steps: int;

  world_editor_config: fpl.editor.WorldEditorConfig;

  // Entities to spawn in the scene at start.
  entity_list:[fpl.EntityDef] (deprecated);

  // Entities to spawn multiple times, at start, in a rectangular pattern.
  entity_grid_list:[EntityGrid] (deprecated);

  // Entities to spawn multiple times, at start, in a circular pattern.
  entity_ring_list:[EntityRing] (deprecated);

  // Entities to spawn in the scene, from the list of predefined ones.
  predefined_entity_list:[PredefinedEntity] (deprecated);

  // List of groups of things that can instantiated in the world.
  entity_defs:[fpl.EntityDef] (deprecated);

  // Entity files to load.
  entity_files:[string];

  // Various settings for rendering the river.
  river_config:RiverConfig;

  // Various settings for rendering:
  rendering_config:RenderConfig;
}

root_type Config;

