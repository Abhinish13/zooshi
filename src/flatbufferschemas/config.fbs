// Copyright 2015 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

include "audio_config.fbs";
include "components.fbs";
include "world_editor.fbs";

namespace fpl.fpl_project;

enum EntityDefs : byte {
  kPatron,
  kProjectile,
  kSplatterParticle,
  kGround,
  kBackground,
  kMidGroundTree,
  kFernGarden,
  kSushiGarden,
  kTreeGarden,
  kNumEntityDef
}

table EntityGrid {
  // Entity to repeat in x-y grid pattern.
  entity:EntityDefs;

  // Number of entities in x and y directions.
  count:fpl.Vec3i;

  // Distance between entities in x and y directions.
  separation:fpl.Vec3;

  // Center of the grid.
  position:fpl.Vec3;

  // Scale applied to each entity.
  scale:fpl.Vec3;
}

table EntityRing {
  // Entity to repeat along an x-y circle.
  entity:EntityDefs;

  // Number of entities in along the ring.
  count:int;

  // Distance from the center of the ring.
  radius:float;

  orientation_offset_angle:float;

  // Placement of first entity on ring, in degrees from x-axis towards y-axis.
  position_offset_angle:float;

  // Center of the ring.
  position:fpl.Vec3;

  // Scale applied to each entity.
  scale:fpl.Vec3;
}

table Config {
  // Audio engine configuration file.
  audio_config:string;

  // Input configuration file.
  input_config:string;

  // The rail definition file to load.
  rail_filename:string;

  // The manifest of assets to load.
  assets_filename:string;

  // The initial speed of the projectiles
  projectile_speed: float;

  // The strength of gravity
  gravity: float;

  // The maximum number of steps to advance bullet each frame
  bullet_max_steps: int;

  world_editor_config: fpl.editor.WorldEditorConfig;

  // Entities to spawn in the scene at start.
  entity_list:[fpl.EntityDef];

  // Entities to spawn multiple times, at start, in a rectangular pattern.
  entity_grid_list:[EntityGrid];

  // Entities to spawn multiple times, at start, in a circular pattern.
  entity_ring_list:[EntityRing];

  // List of groups of things that can instantiated in the world.
  entity_defs:[fpl.EntityDef];
}

root_type Config;

