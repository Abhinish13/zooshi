// When a collision with the entity's body occurs, play a sound effect.  When a
// collision with the entity's mouth occurs, increment the player's score and
// play a sound effect.
{
  "node_list": [
    {
      // Node 0
      "module": "entity",
      "name": "graph_entity"
    },
    {
      // Node 1
      "module": "physics",
      "name": "on_collision",
      "input_edge_list": [
        {
          "edge_type": "breadboard_module_library_OutputEdgeTarget",
          "edge": {
            "node_index": 0,
            "edge_index": 0
          }
        }
      ]
    },
    {
      // Node 2
      "module": "physics",
      "name": "collision_data",
      "input_edge_list": [
        {
          "edge_type": "breadboard_module_library_OutputEdgeTarget",
          "edge": {
            "node_index": 1,
            "edge_index": 0
          }
        }
      ]
    },
    {
      // Node 3
      "module": "string",
      "name": "equals",
      "input_edge_list": [
        {
          "edge_type": "breadboard_module_library_OutputEdgeTarget",
          "edge": {
            "node_index": 2,
            "edge_index": 2
          }
        },
        {
          "edge_type": "breadboard_module_library_String",
          "edge": {
            "value": "Body"
          }
        }
      ]
    },
    {
      // Node 4
      "module": "logic",
      "name": "if",
      "input_edge_list": [
        {
          "edge_type": "breadboard_module_library_OutputEdgeTarget",
          "edge": {
            "node_index": 3,
            "edge_index": 0
          }
        }
      ]
    },
    {
      // Node 5
      "module": "audio",
      "name": "play_sound",
      "input_edge_list": [
        {
          "edge_type": "breadboard_module_library_OutputEdgeTarget",
          "edge": {
            "node_index": 4,
            "edge_index": 0
          }
        },
        {
          "edge_type": "breadboard_module_library_SoundHandle",
          "edge": {
            "value": "hit_char"
          }
        },
        {
          "edge_type": "breadboard_module_library_OutputEdgeTarget",
          "edge": {
            "node_index": 2,
            "edge_index": 1
          }
        },
        {
          "edge_type": "breadboard_module_library_Float",
          "edge": {
            "value": 1.0
          }
        }
      ]
    },
    {
      // Node 6
      "module": "string",
      "name": "equals",
      "input_edge_list": [
        {
          "edge_type": "breadboard_module_library_OutputEdgeTarget",
          "edge": {
            "node_index": 2,
            "edge_index": 2
          }
        },
        {
          "edge_type": "breadboard_module_library_String",
          "edge": {
            "value": "Mouth"
          }
        }
      ]
    },
    {
      // Node 7
      "module": "logic",
      "name": "if",
      "input_edge_list": [
        {
          "edge_type": "breadboard_module_library_OutputEdgeTarget",
          "edge": {
            "node_index": 17,
            "edge_index": 0
          }
        }
      ]
    },
    {
      // Node 8
      "module": "audio",
      "name": "play_sound",
      "input_edge_list": [
        {
          "edge_type": "breadboard_module_library_OutputEdgeTarget",
          "edge": {
            "node_index": 7,
            "edge_index": 0
          }
        },
        {
          "edge_type": "breadboard_module_library_SoundHandle",
          "edge": {
            "value": "fed_giraffe"
          }
        },
        {
          "edge_type": "breadboard_module_library_OutputEdgeTarget",
          "edge": {
            "node_index": 2,
            "edge_index": 1
          }
        },
        {
          "edge_type": "breadboard_module_library_Float",
          "edge": {
            "value": 1.0
          }
        }
      ]
    },
    {
      // Node 9
      "module": "zooshi",
      "name": "player_entity"
    },
    {
      // Node 10
      "module": "attributes",
      "name": "get_attribute",
      "input_edge_list": [
        {
          "edge_type": "breadboard_module_library_OutputEdgeTarget",
          "edge": {
            "node_index": 7,
            "edge_index": 0
          }
        },
        {
          "edge_type": "breadboard_module_library_OutputEdgeTarget",
          "edge": {
            "node_index": 9,
            "edge_index": 0
          }
        },
        {
          "edge_type": "breadboard_module_library_Int",
          "edge": {
            "value": "fpl.zooshi.AttributeDef.PatronsFed"
          }
        }
      ]
    },
    {
      // Node 11
      "module": "float_math",
      "name": "add",
      "input_edge_list": [
        {
          "edge_type": "breadboard_module_library_OutputEdgeTarget",
          "edge": {
            "node_index": 10,
            "edge_index": 0
          }
        },
        {
          "edge_type": "breadboard_module_library_Float",
          "edge": {
            "value": 1.0
          }
        }
      ]
    },
    {
      // Node 12
      "module": "attributes",
      "name": "set_attribute",
      "input_edge_list": [
        {
          "edge_type": "breadboard_module_library_OutputEdgeTarget",
          "edge": {
            "node_index": 7,
            "edge_index": 0
          }
        },
        {
          "edge_type": "breadboard_module_library_OutputEdgeTarget",
          "edge": {
            "node_index": 9,
            "edge_index": 0
          }
        },
        {
          "edge_type": "breadboard_module_library_Int",
          "edge": {
            "value": "fpl.zooshi.AttributeDef.PatronsFed"
          }
        },
        {
          "edge_type": "breadboard_module_library_OutputEdgeTarget",
          "edge": {
            "node_index": 11,
            "edge_index": 0
          }
        }
      ]
    },
    {
      // Node 13: Set flag for the patron.
      "module": "player",
      "name": "fed_patron",
      "input_edge_list": [
        {
          "edge_type": "breadboard_module_library_OutputEdgeTarget",
          "edge": {
            "node_index": 6, // Hit flag.
            "edge_index": 0
          }
        },
        {
          "edge_type": "breadboard_module_library_OutputEdgeTarget",
          "edge": {
            "node_index": 9, // Player entity.
            "edge_index": 0
          }
        },
        {
          "edge_type": "breadboard_module_library_OutputEdgeTarget",
          "edge": {
            "node_index": 2, // Collision target.
            "edge_index": 0
          }
        }
      ]
    },
    {
      // Node 14: Check condition.
      "module": "player",
      "name": "check_all_patrons_fed",
      "input_edge_list": [
        {
          "edge_type": "breadboard_module_library_OutputEdgeTarget",
          "edge": {
            "node_index": 9, // Player entity.
            "edge_index": 0
          }
        }
      ]
    },
    {
      // Node 15: Grant achievement if the condition met.
      "module": "gpg",
      "name": "grant_achievement",
      "input_edge_list": [
        {
          "edge_type": "breadboard_module_library_OutputEdgeTarget",
          "edge": {
            "node_index": 14,
            "edge_index": 0
          }
        },
        {
          "edge_type": "breadboard_module_library_String",
          "edge": {
            "value": "AllYouCanEat"
          }
        }
      ]
    },
    {
      // Node 16
      "module": "patron",
      "name": "patron_upright",
      "input_edge_list": [
        {
          "edge_type": "breadboard_module_library_OutputEdgeTarget",
          "edge": {
            "node_index": 2,
            "edge_index": 0
          }
        }
      ]
    },
    {
      // Node 17
      "module": "logic",
      "name": "and",
      "input_edge_list": [
        {
          "edge_type": "breadboard_module_library_OutputEdgeTarget",
          "edge": {
            "node_index": 16,
            "edge_index": 0
          }
        },
        {
          "edge_type": "breadboard_module_library_OutputEdgeTarget",
          "edge": {
            "node_index": 6,
            "edge_index": 0
          }
        }
      ]
    },
    {
      // Node 18
      "module": "physics",
      "name": "velocity",
      "input_edge_list": [
        {
          "edge_type": "breadboard_module_library_OutputEdgeTarget",
          "edge": {
            "node_index": 1,
            "edge_index": 0
          }
        },
        {
          "edge_type": "breadboard_module_library_OutputEdgeTarget",
          "edge": {
            "node_index": 2,
            "edge_index": 3
          }
        }
      ]
    },
    {
      // Node 19
      "module": "vec3",
      "name": "length",
      "input_edge_list": [
        {
          "edge_type": "breadboard_module_library_OutputEdgeTarget",
          "edge": {
            "node_index": 18,
            "edge_index": 0
          }
        }
      ]
    },
    {
      // Node 20
      "module": "float_math",
      "name": "greater_than_or_equals",
      "input_edge_list": [
        {
          "edge_type": "breadboard_module_library_OutputEdgeTarget",
          "edge": {
            "node_index": 19,
            "edge_index": 0
          }
        },
        {
          "edge_type": "breadboard_module_library_Float",
          "edge": {
            "value": 8.0
          }
        }
      ]
    },
    {
      // Node 21
      "module": "logic",
      "name": "and",
      "input_edge_list": [
        {
          "edge_type": "breadboard_module_library_OutputEdgeTarget",
          "edge": {
            "node_index": 3,
            "edge_index": 0
          }
        },
        {
          "edge_type": "breadboard_module_library_OutputEdgeTarget",
          "edge": {
            "node_index": 20,
            "edge_index": 0
          }
        }
      ]
    }
  ]
}
