// Copyright 2015 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// TODO: move more of shadow map rendering in here as functions.

// The shadow map texture:
uniform sampler2D texture_unit_7;
uniform lowp float shadow_intensity;

// Problem:  We want the outputted depth value to be as precise as possible.
// Unfortunately, GLES just gives us 4 channels (RGBA), each of which is
// only 8 bits of precision.  (Probably)
// Solution:  Encode a float into 4 separate 8-bit floats!
// We make a few assumptions here.  The big one is that the number we are
// encoding is also between 0 and 1.  Basically, we divide our number by various
// powers of 2^8 - 1, and trim them down to 8 bits of precision via some clever
// application of swizzling.
// The most significant bit in this case is stored in the R channel, and the
// least is stored in the A channel.
//
// For further details, please visit:
//
//    http://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/
//
highp vec4 EncodeFloatRGBA(float v) {
  highp vec4 enc = vec4(1.0, 255.0, 65025.0, 160581375.0) * v;
  enc = fract(enc);
  enc -= enc.yzww * vec4(1.0/255.0, 1.0/255.0, 1.0/255.0, 0.0);
  return enc;
}

// Decodes a packed RGBA value into a float.
float DecodeFloatFromRGBA(vec4 rgba) {
  return dot(rgba, vec4(1.0, 1.0/255.0, 1.0/65025.0, 1.0/160581375.0));
}

// Accepts a texture (assumed to be the shadowmap) and a location, and
// returns the depth of the shadow map at that location.  (Note that the
// depth has been encoded into an RGBA value, and needs to be decoded first)
float ReadShadowMap(sampler2D texture, vec2 location) {
  return DecodeFloatFromRGBA(texture2D(texture_unit_7, location));
}

// Read the shadowmap texture, and compare that value (which represents the
// distance from the light-source, to the first object it hit in this
// direction) to our actual distance from the light, in light-space.  If we
// are further away from the light-source than the foreground object rendered
// on the shadowmap, then we are in shadow.
// If we're outside of the bounds of the shadowmap, then we have no
// information about whether we're in shadow or not, so just skip the whole
// step, and render as though we're unshadowed.
vec4 ApplyShadows(mediump vec4 texture_color, mediump vec2 shadowmap_coords,
                  highp float light_dist) {
  mediump vec4 final_color = texture_color;
  float shadow_dimness = 1.0;
  if (shadowmap_coords.x > 0.0 && shadowmap_coords.x < 1.0 &&
      shadowmap_coords.y > 0.0 && shadowmap_coords.y < 1.0) {
    if (ReadShadowMap(texture_unit_7, shadowmap_coords.xy) < light_dist) {
      vec2 vec_from_center = abs(vec2(0.5, 0.5) - shadowmap_coords);
      // dist_from_center is from 0 in the center to 0.5 at the edge.
      float dist_from_center = max(vec_from_center.x, vec_from_center.y);
      // edgeness increases to 1 quadratically to edge
      float edgeness = 4 * dist_from_center * dist_from_center;
      // middleness is a number from 0~1 that represents how close you are to
      // the center of a shadow map. 1 is in the center. 0 is at the edge.
      // Most of the points will be close to 1.
      float middleness = 1.0 - edgeness;
      // Fade shadows that are closer to the edge of the shadow map.
      shadow_dimness = 1.0 - shadow_intensity * middleness;
      final_color = vec4(final_color.xyz * shadow_dimness, final_color.a);
    }
  }

  return final_color;
}

// Find the coordinates to read on the shadow map based on the shadow position.
mediump vec2 CalculateShadowMapCoords(vec4 shadow_position) {
  // Calculate Cartesian coordinates by dividing by w:
  mediump vec2 shadowmap_coords = shadow_position.xy / shadow_position.w;

  // Convert xy coordinates (x=[-1, 1], y=[-1,1]) to uv coordinates
  // (u=[0, 1], v=[0, 1]) to be read by the shadow map.
  shadowmap_coords = (shadowmap_coords + vec2(1.0, 1.0)) / 2.0;

  return shadowmap_coords;
}
